#!/usr/bin/env bash

# Library for platform-independent interactive function definitions.

function man {
	if ! command man -W "$@"; then
		return 1
	elif [[ ! -t 0 ]]; then
		echo 'STDIN must be a tty.' >&2
		return 1
	fi

	groffer --text -Tutf8 -rLL=$((${COLUMNS:-$(tput cols)}-10))n -man "$@" 2>/dev/null | sed -e 's/\x1B\[[[:digit:]]\+m//g' | nvim -c 'set nomod ft=man | syntax on' -
}

# Hack for defining functions from template code read from stdin.
function _function {
	typeset IFS=$' \t\n'
	[[ -t 0 || -z ${1:+_} ]] && return 1
	command eval function "$1" $'{\n' "$(cat)" $'\n}'
}

# rdesktop wrapper
function myrdp {
	rm -rf ~/.rdesktop
	case $1 in
		work)
			rdesktop -EKPzg 1920x1200 -x 0x8F -a 32 -u DWDouglas -d Orbits.net -n Unknown localhost:3390
			;;
		kvm)
			rdesktop -EKg 1920x1200 -x 0x80 -a 24 -u Administrator 192.168.1.3
			;;
		laptop)
			rdesktop -EKg 1920x1200 -x 0x80 -a 24 -u ormaaj ormaaj-win8
			;;
		*)
			return 1
	esac
}


function pushd {
	command pushd "${@:-"$HOME"}"
}

function sprunge {
	curl -sF 'sprunge=<-' 'http://sprunge.us' <"${1:-/dev/stdin}"
}

function whois {
	command whois -H "$@"
}

# Quick and dirty cleanup of portage cache.
function rmvtp {
	shopt -s nullglob
	rm -rf -- /var/tmp/portage/*
	shopt -u nullglob
}

# Quickly adds world read permissions to files and world read/write permissions
# to directories recursively.  «-u user[:group]» will additionally chmod files
# and directories recursively.
function fixperms {
	typeset -a paths
	typeset chmodUserGroup IFS=$' \t\n'

	until ${1+'false'}; do
		case $1 in
			-u)
				if [[ -n $2 ]]; then
					typeset chmodUserGroup=$2
					command shift 2
				else
					echo 'Must supply a user:group for the -u option' >&2
					return 1
				fi
				;;
			--)
				[[ -n $2 ]] && paths+=("${@:2}")
				command shift "$#"
				break
				;;
			*)
				[[ -d $1 ]] && paths+=("$1")
				command shift
		esac
	done

	(( ${#paths[@]} )) || paths+=(.)

	find \
		"${paths[@]}" \
		${chmodUserGroup:+'-exec' 'chown' "$chmodUserGroup" '--' '{}' \+} \
		\( -type d -exec chmod o+rx -- {} + \) -o \( -type f -exec chmod o+r -- {} + \)
}

# Open the given files in an existing vim instance.
# Technically, the arguments are passed to vim --remote
function vimr {
	if [[ -z $DISPLAY ]]; then
		echo 'DISPLAY is unset or empty' >&2
		return 1
	fi
	
	mapfile -t serverList < <(vim --serverlist)
	"${vimCmd[@]}" --servername "${serverList[0]:-ormaaj}" ${serverList[0]:+'--remote'} "$@"
}

# vim: set fenc=utf-8 ff=unix ft=sh ts=4 sts=4 sw=4 noet :
function ls {
	command ls --color=auto --group-directories-first --classify "$@"
}

function grep {
	command grep --color=auto "$@"
}

