#!/usr/bin/env bash

# Debugging function for colored display of argv.
function args {
	{ BASH_XTRACEFD=3 command eval ${BASH_VERSION+"$(</dev/fd/0)"}; } <<-'EOF' 3>/dev/null
		case $- in *x*)
			set +x
			trap 'trap RETURN; set -x' RETURN
		esac
EOF
	
	[[ ${OFD-1} == +([0-9]) ]] || return

	if [[ -t ${OFD:-2} ]]; then
		typeset -A clr=([green]=$(tput setaf 2) [sgr0]=$(tput sgr0))
	else
		typeset clr
	fi

	if ! ${1+false}; then
		printf -- "${clr[green]}<${clr[sgr0]}%s${clr[green]}>${clr[sgr0]} " "$@"
		echo
	else
		echo 'no args.'
	fi >&"${OFD:-2}"
}

# Direct recursion depth.
# Search up the stack for the first non-FUNCNAME[1] and count how deep we are.
# Result goes to stdout, or is optionally assigned to the given variable name.
function callDepth {
	if [[ $FUNCNAME == "${FUNCNAME[1]}" ]]; then
		unset -v n
		printf "$@"
	else
		# If callee is empty then we're definitely being called from global scope.
		# If there is exactly one callee named main, and len(BASH_SOURCE) == 2, then this is also definitely global scope.
		if [[ -z ${FUNCNAME[1]} || ( ${FUNCNAME[-1]} == main && ( ${#FUNCNAME[@]} -eq 2 && ${#BASH_SOURCE[@]} -eq 2 ) ) ]]; then
			typeset n=0
		else
			typeset -i n=1
			while [[ ${FUNCNAME[1]} == "${FUNCNAME[n+1]}" && ${BASH_SOURCE[1]} == "${BASH_SOURCE[n+2]}" ]]; do
				(( n++ ))
			done
		fi
		${1:+"$FUNCNAME" -v} "${1:-printf}" %d "$n"
	fi
}

# Old version
# Direct recursion depth.
# Search up the stack for the first non-FUNCNAME[1] and count how deep we are.
# Result goes to stdout, or is optionally assigned to the given variable name.
#function callDepth2 {
#	# Unset all locals, then "Return" the output or assign to the given variable.
#	if [[ $FUNCNAME == ${FUNCNAME[1]} ]]; then
#		unset -v n fnames
#		printf "$@"
#		return
#	fi
#
#	# Strip "main" off the end of FUNCNAME[@] if current function is named "main" and
#	# Bash added an extra "main" for non-interactive scripts.
#	if [[ main == !(!("${FUNCNAME[1]}")|!("${FUNCNAME[-1]}")) && $- != *i* ]]; then
#		typeset -a fnames=("${FUNCNAME[@]:1:${#FUNCNAME[@]}-2}")
#	else
#		typeset -a fnames=("${FUNCNAME[@]:1}")
#	fi
#
#	typeset n=
#	if (( ${#fnames[@]} )); then
#		while [[ $fnames == ${fnames[++n]} ]]; do
#			:
#		done
#	fi
#
#	${2:+"$FUNCNAME" -v} "${2:-printf}" %d "${n:-0}"
#}

function colorCommand {
    :
}

# exit with a optional status and optional message. status defaults to the previous command.
# die [ status ] [ formatstring ] [ message args ... ]
function die {
	typeset status=$?
	if [[ $1 == -s ]]; then
		[[ $2 == +([0-9]) ]] && status=$1
		command shift 2 2>/dev/null
	fi

	unset -v IFS
	if [[ -n $1 ]]; then
		if ! ${2+false}; then
			printf -- "$@"
		else
			printf '%s\n' "$1"
		fi >&2
	fi

	exit "$status"
}

function getEnv {
	${1:+\:} return 1
	typeset -n name ret=$1
	typeset -a names
	compgen -e | mapfile -t names
	set -- "${names[@]}"
	for name; do
		ret[${!name}]=$name
	done
}

function zipLongest {
	:
}

function inArray {
	set -- "$1" "${2}[@]"
	local x
	for x in "${!2}"; do
		[[ $1 == "$1" ]] && return
	done
	x=$1 "$FUNCNAME" "${!2}"
}

function isDigit {
	typeset x
	for x; do
		[[ $x == +([0-9]) ]] || return
	done
}

# Find the last modified file selected from a glob.
# Usage: latest <glob> <varname>
# Takes an optional glob and optional varname.
# glob defaults to '*'. If varname is set, assign to varname,
# else output to stdout.
function latest {
	if [[ $FUNCNAME == ${FUNCNAME[1]} ]]; then
		unset -v x latest files
		printf -v "$@"
	elif (($# > 2)); then
		printf '%s\n' "Usage: $FUNCNAME <glob> <varname>" 'Error: Takes at most 2 arguments. Glob defaults to *'
		return 1
	else
		if ! shopt -q nullglob; then
			typeset -f +t "$FUNCNAME"
			trap 'shopt -u nullglob; trap - RETURN' RETURN
			shopt -s nullglob
		fi

		IFS= typeset -a 'files=(${1:-*})'
		typeset latest x

		for x in "${files[@]}"; do
			[[ -d $x || $x -ot $latest ]] || latest=$x
		done

		${2:+"$FUNCNAME"} "${2:-printf}" -- %s "$latest"
	fi
}

#function localopt {
#	typeset -a setopts
#	typeset x
#	IFS=: read -ra setopts <<<"$BASHOPTS"
#
#	for x in "${setopts[@]}"; do
#		if [[ $BASHOPTS != *${opt}* ]]; then
#			set -o "$opt"
#			unsetopts+=("$opt")
#		fi
#	done
#}

# lsof wrapper
function lsfd {
	typeset x ofd=2 target=$BASHPID
	typeset -a fds

	{ typeset helpText=$(</dev/fd/0); } <<-EOF
	USAGE: ${FUNCNAME} [-h|-?|--help] [-u <fd>] [ -t <PID> ] [<fd1> <fd2> <fd3>...]

	This is a small lsof wrapper which displays the open file descriptors of the
	current BASHPID. If no FDs are given, the default FDs to display are those open
	by the current process. ofd can also be set in the environment.

	-u <fd>: Use fd for output. Defaults to stderr.
	-t <PID>: Use PID instead of BASHPID.
EOF

	while ! ${1+false}; do
		case ${1##+(-)} in
			u)
				ofd=$2
				command shift 2
				;;
			t)
				target=$2
				command shift 2
				;;
			h|\?|help)
				echo "$helpText" >&2
				return
				;;
			--)
				command shift
				break
		esac
	done

	IFS=, 
	IFS=, local -a "fds=(${*:-/proc/\${target:-self}/fd/*})" 'fds=("${fds[*]##*/}")'
	lsof -a -p "$target" -d "$fds" +f g -- >&"$ofd" # >&2
}

function mapfile2 {
	typeset -a callbacks
	typeset arg
	for arg; do
		case $arg in
			-C)
				callbacks+=("$2")
		esac
	done
}

function togglePolipo {
	if (( EUID )); then
		echo 'Must be root'
		return 1
	else
		ed -s /etc/polipo/config
		rc-service polipo restart
	fi
} <<\EOF
g/#\?socksParentProxy/s/^/#/\
s/^##//\
p
w
EOF

# FIXME
function onReturn {
	trap 'trap "trap - RETURN; eval $(printf %q "$1")" RETURN' RETURN
}

function pushPromptCommand {
	eval "$PROMPT_COMMAND"
	case $TERM in
		xterm*|rxvt*|Eterm|aterm|kterm|gnome*|interix)
			PROMPT_COMMAND='printf "\E]0;%s@%s:%s\a" "$USER" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
			;;
		screen*)
			PROMPT_COMMAND='printf "\E_%s@%s:%s\E\\" "$USER" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
			;;
	esac
}

function remapEsc {
	xmodmap -
	xset r rate 175 65
} <<\EOF
remove Lock = Caps_Lock
keysym Escape = Caps_Lock
keysym Caps_Lock = Escape
add Lock = Caps_Lock
EOF

# Print or assign a random alphanumeric string of a given length.
# rndstr len [ var ]
function rndstr {
	if [[ $FUNCNAME == "${FUNCNAME[1]}" ]]; then
		unset -v a l
		printf "$@"
	elif [[ $1 != +([[:digit:]]) ]]; then
		return 1
	elif (( $1 )); then
		typeset a=({a..z} {A..Z} {0..9}) l=${#a[@]} 
		eval '${2:+"${FUNCNAME:-${.sh.fun}}" -v} "${2:-printf}" -- %s "${a[RANDOM%l]"{1..'"$1"'}"}"'
	fi
}

function sprunge {
	curl -sF 'sprunge=<-' 'http://sprunge.us' <"${1:-/dev/stdin}"
}

function unset2 {
	unset -v -- "$@"
}

# Download and play concurrently.
function yt {
	typeset vid file
	if ! vid=$(xsel -o); then
		{
			echo 'xsel failed.'
			typeset -p DISPLAY
		} >&2
		return 1
	elif ! file=$(youtube-dl --get-filename -- "$vid"); then
		echo 'Could not resolve file name from URL.' >&2
		return 1
	elif [[ -f $file ]]; then
		{
			printf 'File already exists, continuing if possible: %q\n' "$file"
			youtube-dl -f '[height <=? 480]' --no-part --xattrs "$vid" &
		} >&2
	else
		{
			inotifywait -e create . 2>&1 >&3 | {
				grep -q 'Watches established.'
				youtube-dl -f '[height <=? 480]' --no-part --xattrs "$vid" <&4 >&2
			}
		} 3>&1 | grep -q "./ CREATE $file"
	fi 4<&0

	smplayer -add-to-playlist "$file" &
}

# TODO unfinished
function Zip {
	typeset arg
	typeset -a 
	typeset -A opts
}

# vim: set fenc=utf-8 ff=unix ft=sh :
