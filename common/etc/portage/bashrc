#!/usr/bin/env bash
# /etc/portage/bashrc
# Dan Douglas <d@ndougl.as>

[[ $EBUILD_PHASE != setup ]] && return
#typeset -a bashrcInitialFunctions
#compgen -A function | mapfile -t bashrcInitialFunctions

# Declare bashrc functions.
# Always call `__bashrc_Func_Tool__ collisioncheck` first!
function __bashrc_Funcs__ {

	# True if all args are valid names
	function checkValidNames {
		${1:+\:} return 1
		typeset name
		for name; do
			[[ $name == [[:alpha:]_]*([[:alnum:]_]) ]] || return
		done
	}

	# Create an associative array with keys filled from the given arrays
	function arrayToSet {
		checkValidNames "$1" "$2" "${@:3}" || return
		typeset -n _ret=$1 ref
		shift
		typeset key
		for ref; do
			for key in "${ref[@]}"; do
				_ret[$key]=
			done
		done
	}

	# Set up the initial associative array of CFLAGS and CXXFLAGS. 
	# Takes an array name to assign and optionally the names of "flag groups" to include.
	# bashrcSetupFlags arrname groupname [ groupname ... ]
	function bashrcSetupFlags {
		if [[ -z $1 ]]; then
			eerror "${FUNCNAME}: Must pass at least a non-empty associative array name argument."
			return 1
		else
			typeset -n __groupArray=$1
			typeset nprocs
			nprocs=$(getconf _NPROCESSORS_ONLN) || nprocs=16
			
			# Base CFLAG groups
			typeset -A groups=(
				[base]='(-march=native -Ofast -pipe)'
				[graphite]='(-floop-interchange -floop-strip-mine -floop-block)'
				[vectorize]='(-ftree-vectorize)'
				[debug]='(-ggdb)'
				[prof]='(-p)'
				[spstrong]='(-fstack-protector-strong -fstack-check=specific)'
				[lto]='(-flto -fuse-linker-plugin)'
			)

			typeset x
			typeset -a y
			for x in "${@:2}"; do
				if [[ ! -v groups[$x] ]]; then
					eerror "${FUNCNAME}: Invalid flag group name: ${x}"
					return 1
				else
					eval "y=${groups[$x]}"
					arrayToSet __groupArray y
				fi
			done
		fi
	}

	# Usage: bashrcRunHooks "hookMap[$CATEGORY/$PN]"
	function bashrcRunHooks {
		set -x; trap 'trap RETURN; set +x' RETURN
		typeset -A flags
		typeset -a baseFlagGroups
		typeset nprocs lto
		nprocs=$(getconf _NPROCESSORS_ONLN) || nprocs=16
		export MAKEOPTS=-j${nprocs}

		typeset -a cppflags=() # (-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2)

		typeset -a ldflags=(
			-O1
			-z lazy -z relro
			--as-needed
			--sort-common
			--hash-style=gnu
		)

		baseFlagGroups=(base graphite lto spstrong debug)
		[[ $(gcc-config -c) == *-@(hardened*|vanilla) ]] && baseFlagGroups+=(spstrong)

		if [[ -v $1 ]] &&
			typeset -n __ref=$1 &&
			typeset -a "__hooks=${__ref}" &&
			(( ${#__hooks[@]} >= 1 )) 
		then
			bashrcSetupFlags flags "${baseFlagGroups[@]}" || die 'bashrc: bashrcSetupFlags failed.'
			typeset hook
			for hook in "${__hooks[@]}"; do  
				if ! typeset -f "$hook" >/dev/null 2>&1; then
					eerror "bashrc: Package specified a non-existing hook function: ${hook}"
					return 1
				elif einfo "bashrc: running hook: ${hook}"
					# All hooks must expect to receive `flags` as a first parameter.
					if ! "$hook" flags; then
						eerror "bashrc: hook function: ${hook} returned nonzero."
						return 1
					fi
				then
					einfo "bashrc: Hook function: ${hook} -- finished successfully. :)"
				else
					ewarn "bashrc: Hook ${hook} -- failed with status $?. :("
					return 1
				fi
			done
		elif [[ -n $OVERRIDE_FLAG_GROUPS ]]; then
			typeset -a overrideGroups
			IFS=' ' read -ra overrideGroups <<<"$OVERRIDE_FLAG_GROUPS"
			bashrcSetupFlags flags "${overrideGroups[@]}" || die 'bashrcSetupFlags failed.'
			einfo "bashrc: No hook function defined for $1 -- used user-defined OVERRIDE_FLAG_GROUPS. :)"
		else
			bashrcSetupFlags flags "${baseFlagGroups[@]}" || die 'bashrc: bashrcSetupFlags failed.'
			einfo "bashrc: No hook function defined for $1 -- used default flag groups. :)"
		fi

		[[ -v flags[-flto] ]] && lto=
		if bashrcIsClang; then
			bashrcUseClang flags || die 'Clang setup failed.'
		else
			if [[ -v lto ]]; then
				unset -v 'flags[-flto]'
				flags[-flto=$nprocs]=
			fi
			export AR=gcc-ar NM=gcc-nm RANLIB=gcc-ranlib
		fi
		
		typeset IFS=' '
		export CPPFLAGS=${cppflags[@]}
		export CFLAGS=${!flags[@]} CXXFLAGS=${!flags[@]}
		IFS=,
		export LDFLAGS; LDFLAGS="-Wl,${ldflags[*]}${lto+${CPPFLAGS:+ ${CPPFLAGS}} ${!flags[@]}}"
	}

	# Test whether clang is indicated by the environment.
	function bashrcIsClang {
		set C{C,XX}
		typeset -n __varname
		for __varname; do
			[[ $__varname == *clang* ]] && return
		done
		return 1
	}

	# Set up clang environment here so it can be configured as a hook function
	function bashrcUseClang {
		[[ $1 ]] && typeset -n __ref=$1 || return
		bashrcNoGraphite __ref
		if [[ -v __ref[-flto] ]]; then
			export AR=llvm-ar RANLIB=llvm-ranlib NM=llvm-nm
			unset -v '__ref[-fuse-linker-plugin]'
			__ref+=(
				[-fsanitize=cfi]=
				[-fsanitize-cfi-cross-dso]=
				#[-fwhole-program-vtables]=
			)
		fi
		unset -v '__ref[-fstack-check=specific]'
		__ref+=([-fcolor-diagnostics]=)
		export CC=clang CXX=clang++
		export CPPFLAGS+="${CPPFLAGS:+ }-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2"
	}

	function bashrcStd++14 {
		[[ $1 ]] && typeset -n _ref=$1 &&
			_ref[-std=gnu++14]=
	}

	function bashrcMakeoptsJ1 {
		export MAKEOPTS=-j1
	}

	function bashrcFdLimit {
		ulimit -n 1000000
	}
	
	function bashrcNoDebug {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v '_ref[-ggdb]'
	}

	# s/-Ofast/-O3/
	function bashrcNoFast {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v '_ref[-Ofast]' &&
			_ref[-O3]=
	}

	function bashrcNoGraphite {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v _ref\[-{floop-{interchange,strip-mine,block},fgraphite-identity}\]
	}

	function bashrcNoIdentity {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v '_ref[-fgraphite-identity]'
	}

	function bashrcNoError {
		[[ $1 ]] && typeset -n _ref=$1 &&
			_ref+=([-Wno-error]= [-Wno-error=array-bounds]=)
	}

	function bashrcNoLDLazy {
		typeset x
		for x in "${!ldflags[@]}"; do
			if [[ ${ldflags[x]} == -z && ${ldflags[x + 1]} == lazy ]]; then
				unset -v ldflags\[{x,x+1}\]
			fi
		done
		ldflags=("${ldflags[@]}")
	}
	
	function bashrcNoLTO {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v _ref\[-{flto,fuse-linker-plugin}\]
	}

	function bashrcStackProtectorStrong {
		[[ $1 ]] && typeset -n _ref=$1 &&
			bashrcSetupFlags _ref spstrong &&
			unset -v _ref\[-f{,no-}stack-protector\]
	}

	function bashrcNoStackProtector {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v _ref\[-fstack-{protector{,-strong},check=specific}\]

		_ref[-fno-stack-protector]=
	}

	function bashrcBashHook {
		export EXTRA_ECONF=--without-bash-malloc
		
# 		function pre_src_configure {
# 			eval unset -f src_configure \; \
# 				"$(typeset -fp src_configure | sed -r 's/^(local myconf).*/\1=(--without-bash-malloc)/')"
# 		}
	}

	function bashrcDgKamFix {
		export MYSQL_TOOLS_PATH=/usr/share/mysql/scripts
	}

	function bashrcDoBinutils {
		export EXTRA_ECONF=--enable-gold=default
	}

	function bashrcKdevelopCollisionIgnore {
		export COLLISION_IGNORE='/usr/share/kdevappwizard/templates/qmake_qt4guiapp.tar.bz2'
	}

	function bashrcUsePIC {
		[[ $1 ]] && typeset -n _ref=$1 &&
			_ref+=([-fPIC]=)
	}

#	function bashrcLocalNullFunction {
#		typeset -a phaseFuncs nullFuncs
#		typeset -n _ref
#		typeset _arg
#		for _arg; do
#			[[ ${_arg/#-p/phase} =~ ^(phase|(n)ull)$ ]]
#			case ${_arg} in
#				(-p|--phase)
#					_ref=phaseFuncs
#					shift
#					continue
#					;;
#				(-n|--null)
#					_ref=nullFuncs
#					shift
#					continue
#			esac
#			case ${!_ref} in
#				phaseFuncs)
#
#				(@(pkg_@(pretend|setup|@(pre|post)@(inst|rm))|src_@(unpack|prepare|configure|compile|test|install)))
#					;;
#
#		done
#	}
}

# Prevent elusive namespace issues.
function __bashrc_Func_Tool__ {
	typeset -a bashrcFuncs=(
		arrayToSet
		bashrcAMake112
		bashrcBashHook
		bashrcDgKamFix
		bashrcDoBinutils
		bashrcDoKsh
		bashrcFdLimit
		bashrcHeimdal
		bashrcIsClang
		bashrcKdeLibs
		bashrcKdevelopCollisionIgnore
		bashrcNoDebug
		bashrcNoError
		bashrcNoFast
		bashrcNoGraphite
		bashrcNoLTO
		bashrcPlainBuild
		bashrcRunHooks
		bashrcSetupFlags
		checkValidNames
	)

	case $1 in
		collisioncheck)
			typeset func
			for func in "${bashrcFuncs[@]}"; do
				if [[ $(type -t "$func") == function ]]; then
					eerror "${FUNCNAME}: FUNCTION COLLISION DETECTED! ${func}"
					return 1
				fi
			done
			;;
		cleanup)
			if ! unset -f "${bashrcFuncs[@]}" __bashrc_Func_Tool__ __bashrc_Funcs__ __bashrc_Main__; then
				eerror "${FUNCNAME}: Failed cleaning up functions."
				return 1
			fi
			;;
		*)
			eerror "${FUNCNAME}: Invalid operation: ${1}. Doing nothing."
			return 1
	esac
}

function __bashrc_Main__ {
	unset -v IFS
	# Force current bash. Because why not?
	(( BASH_VERSINFO[0] >= 4 && BASH_VERSINFO[1] >= 3 )) || die 'bashrc requires at least Bash 4.3.'

	typeset -a shopts=(extglob lastpipe expand_aliases)
	typeset opt
	for opt in "${!shopts[@]}"; do
		if shopt -q "${shopts[opt]}"; then
			unset -v 'shopts[opt]'
		else
			shopt -s "${shopts[opt]}"
		fi
	done
	(( ${#shopts[@]} )) && trap "trap RETURN; shopt -u ${shopts[*]}" RETURN

	# We could try to save and restore functions to avoid collisions, but
	# it's probably better to just fail loudly and fix the collision
	# instead.
	__bashrc_Func_Tool__ collisioncheck || die 'bashrc: collision check failed.'
	__bashrc_Funcs__ || die 'bashrc: Somehow failed declaring functions?' # Should never happen.

	# Define mappings from package names to a set of hook functions.
	typeset -A hookMap=(
		#[app-crypt/sbsigntool]='(bashrcNoLTO bashrcNoFast bashrcNoGraphite)'
		[app-crypt/johntheripper]='(bashrcNoStackProtector)'
		[app-benchmarks/i7z]='(bashrcNoLTO)'
		#[app-emulation/qemu]='(bashrcNoLTO)'
		[app-office/libreoffice]='(bashrcUseClang bashrcNoFast bashrcNoDebug)'
		[app-shells/bash]='(bashrcBashHook)'
		[app-shells/ksh]='(bashrcUseClang bashrcUsePIC)'
		[app-text/texlive-core]='(bashrcNoLTO)'
		[app-text/convertlit]='(bashrcNoLTO)'
		[dev-db/sqlite]='(bashrcNoFast)'
		[dev-db/postgresql]='(bashrcNoFast)'
		[dev-lang/ocaml]='(bashrcNoLTO)'
		[dev-libs/protobuf]='(bashrcNoLTO)'
		[dev-libs/gmp]='(bashrcNoIdentity)' # Don't remove
		[dev-libs/mpfr]='(bashrcNoFast)' # Don't remove
		[dev-lang/perl]='(bashrcNoLTO)'
		#[dev-lang/mono]='(bashrcUseClang)'
		[dev-lang/spidermonkey]='(bashrcNoLTO)'
		[dev-lang/R]='(bashrcNoLTO bashrcNoGraphite)'
		#[dev-libs/libgcrypt]='(bashrcNoFast bashrcNoStackProtector)'
		[dev-perl/DBD-SQLite]='(bashrcNoFast)'
		[dev-qt/qt-creator]='(bashrcNoFast)'
		[dev-qt/qtscript]='(bashrcNoLTO bashrcNoFast)'
		[dev-qt/qtwebkit]='(bashrcNoLTO bashrcNoFast bashrcNoDebug)'
		[dev-qt/qtquick1]='(bashrcUseClang)'
		[dev-scheme/guile]='(bashrcNoFast)'
		[dev-util/perf]='(bashrcNoLTO)'
		[dev-util/valgrind]='(bashrcNoLTO)'
		[dev-vcs/cvs]='(bashrcNoLTO)'
		[gnome-extra/libgda]='(bashrcNoFast)'
		[kde-apps/okular]='(bashrcNoError)'
		[kde-base/kdelibs]='(bashrcNoFast)'
		[kde-frameworks/kjs]='(bashrcNoFast)'
		[media-gfx/digikam]='(bashrcDgKamFix)'
		[media-gfx/rawstudio]='(bashrcNoFast)'
		[media-gfx/mypaint]='(bashrcNoLTO)'
		[media-libs/mesa]='(bashrcNoGraphite)'
		[media-libs/opencv]='(bashrcNoFast)'
		[media-libs/opus]='(bashrcNoFast)'
		[media-libs/alsa-lib]='(bashrcNoLTO)'
		[media-libs/x264]='(bashrcNoLTO)'
		[media-video/vlc]='(bashrcNoLTO)'
		[net-analyzer/rrdtool]='(bashrcNoFast)'
		[net-libs/nodejs]='(bashrcNoFast bashrcNoGraphite)'
		[net-libs/webkit-gtk]='(bashrcUseClang bashrcNoFast bashrcNoDebug bashrcNoLTO)'
		[net-misc/lksctp-tools]='(bashrcNoLTO)'
		[net-fs/samba]='(bashrcNoLTO)'
		[sys-apps/pciutils]='(bashrcNoLTO)'
		[sys-boot/syslinux]='(bashrcNoLTO)'
		[sys-devel/gettext]='(bashrcNoLTO)'
		[sys-fs/udev]='(bashrcNoFast)'
		[sys-libs/db]='(bashrcNoFast)'
		[sys-libs/glibc]='(bashrcNoLTO)'
		[sys-devel/llvm]='(bashrcNoDebug bashrcNoGraphite bashrcNoLTO)'
		[sys-devel/binutils]='(bashrcDoBinutils)'
		[sys-process/audit]='(bashrcNoLTO)'
		[sys-process/numactl]='(bashrcNoLTO)'
		[www-client/phantomjs]='(bashrcNoFast bashrcNoDebug bashrcNoLTO)'
		[www-client/chromium]='(bashrcNoLTO bashrcNoFast bashrcNoDebug)'
		[www-client/firefox]='(bashrcNoFast bashrcNoDebug)'
		[www-servers/apache]='(bashrcStackProtectorStrong)'
		[www-servers/nginx]='(bashrcStackProtectorStrong)'
		[x11-base/xorg-server]='(bashrcNoError)'
	)

	bashrcRunHooks "hookMap[${CATEGORY}/${PN}]" || die "bashrc: RunHooks failed with status $?."
	einfo $'bashrc computed flags:\n'"$(declare -p CPPFLAGS CFLAGS CXXFLAGS LDFLAGS)"
	unset -v QT_SELECT
	__bashrc_Func_Tool__ cleanup || die 'bashrc: cleanup failed.'
}

__bashrc_Main__ "$@"

