# Copyright Â© 2012-2014 Dan Douglas <ormaaj@gmail.com>
# May be distributed under the terms of the MIT license.
[[ $- == *i* ]] || return

# Shell configuration that applies to all environments.
function setupUniversalOptions {
	stty -ixon -ctlecho
	shopt -u interactive_comments lithist
	shopt -s extglob globstar lastpipe cmdhist histappend checkwinsize 2>/dev/null
	set -o vi                        # Set interactive vi mode.
	set +o histexpand                # Disable history expansion.
}

# Set env vars that always apply to this user's interactive shells.
function setupUniversalEnvironment {
	unset -v PYTHONPATH
	export XMLLINT_INDENT='    '     # Make the xmllint formatter use 4-space indents.
	export COMP_CVS_REMOTE=1         # Access remotely checked-out files over passwordless ssh for CVS
	export COMP_CONFIGURE_HINTS=1    # Avoid stripping description in --option=description of './configure --help'
	export COMP_TAR_INTERNAL_PATHS=1 # Define to avoid flattening internal contents of tar files
	export MONO_USE_LLVM=1

	# If this is a real linux VT then allow 16 colors (default is 8) and swap caps-lock / escape keys
	if [[ $TERM == linux ]]; then
		export TERM=linux-16color
		loadkeys -
	fi <<\EOF 2>/dev/null
keycode 1 = Caps_Lock
keycode 58 = Escape
EOF
}

# Source the appropriate libraries for the current runtime environment.
function sourceFuncs {
	typeset myRootPath
	if myRootPath=$(dirname "$(readlink -snf -- "$BASH_SOURCE")") && [[ -d $myRootPath ]]; then
		# Source the general-purpose function library.
		command . "${myRootPath}/functions" || printf 'Warning: sourcing function library returned nonzero status for the path: %q\n' "${myRootPath}/interactivefunctions" >&2

		# Source libraries of functions for interactive use. Platform-specific
		# setup and function definitions are first so they're available to the
		# common library.
		case ${OSTYPE:-$(uname -o)} in
			[Cc]ygwin)
				command . "${myRootPath}/interactivefunctions-cygwin" || return
				setupCygwin
				;;
			GNU/Linux|linux-gnu)
				command . "${myRootPath}/interactivefunctions-linux" || return
				setupLinux
				;;
			*)
				echo 'Error: Unknown OSTYPE, not sourcing platform-specific functions.' >&2
				return 1
		esac

		command . "${myRootPath}/interactivefunctions-common" || return
	else
		echo 'Failed while attempting to locate the dotfiles path. Cannot source functions.' >&2
		return 1
	fi
}

function main {
	typeset -f +t "$FUNCNAME"
	trap 'trap - RETURN; unset -f "$FUNCNAME"' RETURN

	setupUniversalOptions || echo 'Warning: setupUniversalOptions returned nonzero.' >&2
	setupUniversalEnvironment || echo 'Warning: setupUniversalEnvironment returned nonzero.' >&2
	sourceFuncs || echo 'Warning: sourceFuncs returned nonzero.' >&2
}

# If we want to show error output only if reloading this file via the `brc' wrapper.
#if [[ ${FUNCNAME[1]} == brc ]]; then
#	main "$@"
#else
#	main "$@" >/dev/null 2>&1
#fi

main "$@"

# vim: set fenc=utf-8 ff=unix :
