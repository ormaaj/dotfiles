#!/usr/bin/env bash
# Copyright Â© 2012-2014 Dan Douglas <ormaaj@gmail.com>
# This file may be distributed under the terms of the MIT license. See the accompaning LICENSE file.

# This library includes functions for setting up the interactive environment as well as functions that are intended for interactive use.

function conditionalDefine {
	shopt -s extglob globstar lastpipe cmdhist histappend checkwinsize 2>/dev/null

	case $(uname -o) in
		[Cc]ygwin)
			typeset curOS=Cygwin
			;;
		GNU/Linux)
			typeset curOS=Linux
			;;
		*)
			printf '%s\n' 'bashrc: Unknown "uname -o", assuming Linux' >&2
			typeset curOS=Linux
	esac

	case $curOS in
		Cygwin)

			function autossh-wrapper {
				typeset autosshHostDefault

				if [[ -n $1 ]]; then
				    
				elif [[ -r ~/.autossh_host_default ]]; then
					IFS= read -r autosshHostDefault <~/autossh_host_default default_user
				else

				while :; do
					autossh -M 1234 -nNTR 3333:localhost:4114 -R 3390:localhost:3389 smorg@ormaaj.org
					sleep 30
				done
			}

			function cygServerAdmin {
				while :; do
					if ! net localgroup Administrators | grep -q cyg_server; then
						net localgroup Administrators cyg_server /add
						# cygrunsrv -E sshd
						# sleep 1
						# cygrunsrv -S sshd
					fi
					sleep 10
				done
			}

			# Cygwin's plain vim built without X11 support, so run gvim nongraphically.
			function vim { gvim -v "$@"; };

			# Programmable completion (Cygwin).
			# [[ -f /etc/bash_completion ]] && . /etc/bash_completion
			;;
		Linux)
			shopt -s extglob globstar lastpipe cmdhist histappend checkwinsize 2>/dev/null

			# Programmable completion (Gentoo).
			# [[ -f /etc/profile.d/bash-completion ]] && . /etc/profile.d/bash-completion

			declare -g \
				PROMPT_DIRTRIM=3 \
				HISTSIZE=1000000 \
				HISTTIMEFORMAT='%c ' \
				PROMPT_COMMAND='history -a'

			export \
				PATH=/home/smorg/doc/projects/bash/scripts:${PATH} \
				PAGER=vimpager \
				MANPAGER=vimmanpager \
				BROWSER=chromium-browser-live

			# Load kvm-related modules
			function kvmmodprobe {
				typeset x
				echo 'loading modules:'

				{
					find "/lib/modules/$(uname -r)" -iname '*virtio*' -printf '%f\0'
					printf '%s\0' 9p # Additional modules.
				} | while IFS= read -rd '' x; do
						x=${x%.*}
						printf '%4s%s\n' '' "$x"
						modprobe -- "$x"
					done
			}

			# rdesktop wrapper for common presets.
			function myrdp {
				rm -rf ~/.rdesktop
				case $1 in
					work)
						rdesktop -EKPzg 1920x1200 -x 0x8F -a 32 -u DWDouglas -d Orbits.net -n Unknown localhost:3390
						;;
					kvm)
						rdesktop -EKg 1920x1200 -x 0x80 -a 24 -u Administrator 192.168.1.3
						;;
					*)
						return 1
				esac
			}
	esac

	# Common functions constructed with conditional runtime behavior are below.

	# Hack function defs. Function code is read from stdin.
	# Note $(</dev/fd/*) is broken on Cygwin. Using cat instead.
	function _function {
		typeset IFS=$' \t\n'
		[[ -t 0 || -z ${1:+_} ]] && return 1
		command eval function "$1" $'{\n' "$(cat)" $'\n}'
	}
	
	[[ $curOS == "Linux" ]]
	_function vimr <<-'CYGWIN' 3<&0 <<-'LINUX' <&$((3 * $?))
		typeset -a serverList vimCmd=(gvim -v)
		mapfile -t serverList < <("${vimCmd[@]}" --serverlist)
		"${vimCmd[@]}" --servername "${serverList[0]:-ormaaj}" ${serverList[0]:+--remote} "$@"
CYGWIN
		typeset -a serverList vimCmd=(vim)
		mapfile -t serverList < <("${vimCmd[@]}" --serverlist)
		"${vimCmd[@]}" --servername "${serverList[0]:-ormaaj}" ${serverList[0]:+--remote} "$@"
LINUX

	# Windows Explorer's "copy as path" feature outputs a newline-delimited list of
	# quoted paths, with no trailing newline. This is ok since NTFS filenames can't
	# contain newlines or quotes. If we're on Cygwin, then build an array while
	# stripping quotes from pre-quoted paths only, and handle the sometimes missing
	# newline by copying to a herestring. (mapfile looks broken in 10 different
	# ways on Cygwin)
	[[ $curOS == "Linux" ]]
	_function vimrx <<-'CYGWIN' 3<&0 <<-'LINUX' <&$((3 * $?))
		typeset -a fpath
		typeset x

		while IFS= read -r x; do
			[[ ( ! -e $x ) && $x =~ ^\"(.*)\"$ ]] && x=${BASH_REMATCH[1]}
			[[ $x ]] && fpath+=("$(cygpath -u "$x")")
		done <<<"$(xclip -o)"

		if (( ${#fpath[@]} )); then
			vimr "${fpath[@]}"
		else
			echo 'No paths' >&2
			return 1
		fi
CYGWIN
		vimr "$(xclip -o)"
LINUX

	unset -f _function
}

# shortcut for default trayer options
function trayr {
	typeset -a opts=(
		--edge top
		--align right
		--SetDockType true
		--SetPartialStrut true
		--expand true
		--widthtype percent
		--width 15
		--transparent true
		--tint 0x000000
		--heighttype pixel
		--height 12
	)

	trayer "${opts[@]}" & disown
}

# vim: set fenc=utf-8 ff=unix ft=sh :
