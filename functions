#!/usr/bin/env bash

shopt -s extglob

# Debugging function for colored display of argv.
function args {
	{ BASH_XTRACEFD=3 command eval ${BASH_VERSION+"$(</dev/fd/0)"}; } <<-'EOF' 3>/dev/null
		case $- in *x*)
			set +x
			trap 'trap RETURN; set -x' RETURN
		esac
EOF
	
	[[ ${OFD-1} == +([0-9]) ]] || return

	if [[ -t ${OFD:-2} ]]; then
		typeset -A clr=([green]=$(tput setaf 2) [sgr0]=$(tput sgr0))
	else
		typeset clr
	fi

	if ! ${1+false}; then
		printf -- "${clr[green]}<${clr[sgr0]}%s${clr[green]}>${clr[sgr0]} " "$@"
		echo
	else
		echo 'no args.'
	fi >&"${OFD:-2}"
}

# Direct recursion depth.
# Search up the stack for the first non-FUNCNAME[1] and count how deep we are.
# Result goes to stdout, or is optionally assigned to the given variable name.
function callDepth {
	if [[ $FUNCNAME == "${FUNCNAME[1]}" ]]; then
		unset -v n
		printf "$@"
	else
		# If callee is empty then we're definitely being called from global scope.
		# If there is exactly one callee named main, and len(BASH_SOURCE) == 2, then this is also definitely global scope.
		if [[ -z ${FUNCNAME[1]} || ( ${FUNCNAME[-1]} == main && ( ${#FUNCNAME[@]} -eq 2 && ${#BASH_SOURCE[@]} -eq 2 ) ) ]]; then
			typeset n=0
		else
			typeset -i n=1
			while [[ ${FUNCNAME[1]} == "${FUNCNAME[n+1]}" && ${BASH_SOURCE[1]} == "${BASH_SOURCE[n+2]}" ]]; do
				(( n++ ))
			done
		fi
		${1:+"$FUNCNAME" -v} "${1:-printf}" %d "$n"
	fi
}

# Old version
# Direct recursion depth.
# Search up the stack for the first non-FUNCNAME[1] and count how deep we are.
# Result goes to stdout, or is optionally assigned to the given variable name.
function callDepth2 {
	# Unset all locals, then "Return" the output or assign to the given variable.
	if [[ $FUNCNAME == ${FUNCNAME[1]} ]]; then
		unset -v n fnames
		printf "$@"
		return
	fi

	# Strip "main" off the end of FUNCNAME[@] if current function is named "main" and
	# Bash added an extra "main" for non-interactive scripts.
	if [[ main == !(!("${FUNCNAME[1]}")|!("${FUNCNAME[-1]}")) && $- != *i* ]]; then
		typeset -a fnames=("${FUNCNAME[@]:1:${#FUNCNAME[@]}-2}")
	else
		typeset -a fnames=("${FUNCNAME[@]:1}")
	fi

	typeset n=
	if (( ${#fnames[@]} )); then
		while [[ $fnames == ${fnames[++n]} ]]; do
			:
		done
	fi

	${2:+"$FUNCNAME" -v} "${2:-printf}" %d "${n:-0}"
}

# Formatted cleancache stats
function ccmon {
	typeset i interval=${1:-.5}

	while :; do
		for i in /sys/kernel/mm/cleancache/*; do
			printf '%-15s %d\n' "${i##*/}:" "$(<"$i")"
		done
		sleep "$interval"
		clear
	done
}

# Set radeon power management
function clk {
	typeset base=/sys/class/drm/card0/device
	[[ -r ${base}/hwmon/hwmon0/temp1_input && -r ${base}/power_profile ]] || return 1

	case $1 in
		low|high|default)
			printf '%s\n' "temp: $(<${base}/hwmon/hwmon0/temp1_input)C" "old profile: $(<${base}/power_profile)"
			echo "$1" >${base}/power_profile
			echo "new profile: $(<${base}/power_profile)"
			;;
		*)
			echo "Usage: $FUNCNAME [ low | high | default ]"
			printf '%s\n' "temp: $(<${base}/hwmon/hwmon0/temp1_input)C" "current profile: $(<${base}/power_profile)"
	esac
}

function composePE {
	:	
}

# Open EAPI pdf
function eapi {
	okular "$(equery f --filter 'doc' 'app-doc/pms:live' | grep '.pdf$')" >/dev/null 2>&1 &
	disown
}

# List eix overlay numbers.
function eolist {
	OVERLAYS_LIST=all PRINT_COUNT_ALWAYS=never eix -!
}

function eResolveAtom {
	typeset my_overlay=$(portageq get_repo_path / custom)

	case $(</dev/fd/3) in
		0)
			if [[ ! $(</dev/stdin) =~ (.*)/(.*) ]]; then
				echo 'Error parsing atom.'
				return 6
			fi
			;;
		1) echo 'eix returned status 1'
			return 1
			;;
		2) echo "No packages matching $1"
			return 2
			;;
		3|4) printf '%s' 'Must specify a unique package atom.'
			;;&
		3) echo "${1} matches:"
			cat
			return 3
			;;
		4) echo
			return 4
			;;
		*) echo 'eix returned unknown status > 4'
			return 5
	esac <<\EOF <&3 <<<'' >&2
trap 'printf %s "$?"' EXIT
[[ ${1+_} ]] || exit 4
NOFOUND_STATUS=2 MOREFOUND_STATUS=3 eix --only-names -e -- "$1" >/dev/stdin
EOF

	eval "${2}"'=( "${BASH_REMATCH[@]}" )'
}

function etest {
	local INFD savefd
	export INFD
	{
		ebuild --skip-manifest "$(portageq get_repo_path / custom)"/gentoo-debug/p/p-0.ebuild "${@:1:$#-1}"
	} {savefd}<&0 <<<"${!#}" {INFD}<&0 <&"$savefd"-
	cat "$(portageq envvar PORTAGE_TMPDIR)"/portage/
}

# function flags (
# grep -E '^(C|LD)(XX)?FLAGS' </etc/make.conf | mapfile -t out
# echo "${out[@]}"
# )

function info {
	command info --vi-keys
}

function inArray {
	set -- "$1" "${2}[@]"
	local x
	for x in "${!2}"; do
		[[ $1 == "$1" ]] && return
	done
	x=$1 "$FUNCNAME" "${!2}"
}

function pmatch {
	${1+typeset x=}"${1-false}" &&
	while command shift; do
		[[ $x == $1 ]] && return
	done 2>/dev/null
	return 1
}


function isSubset {
	local -a 'xkeys=("${!'"$1"'[@]}")' 'ykeys=("${!'"$2"'[@]}")'
	set -- "${@/%/[key]}"

	(( ${#xkeys[@]} <= ${#ykeys[@]} )) || return 1

	typeset key
	for key in "${xkeys[@]}"; do
		[[ ${!2+_} && ${!1} == "${!2}" ]] || return 1
	done
}

function ixio {
	local n x
}

# Find the last modified file selected from a glob.
# Usage: latest <glob> <varname>
# Takes an optional glob and optional varname.
# glob defaults to '*'. If varname is set, assign to varname,
# else output to stdout.
function latest {
	if [[ $FUNCNAME == ${FUNCNAME[1]} ]]; then
		unset -v x latest files
		printf -v "$@"
	elif (($# > 2)); then
		printf '%s\n' "Usage: $FUNCNAME <glob> <varname>" 'Error: Takes at most 2 arguments. Glob defaults to *'
		return 1
	else
		if ! shopt -q nullglob; then
			typeset -f +t "$FUNCNAME"
			trap 'shopt -u nullglob; trap - RETURN' RETURN
			shopt -s nullglob
		fi

		IFS= typeset -a 'files=(${1:-*})'
		typeset latest x

		for x in "${files[@]}"; do
			[[ -d $x || $x -ot $latest ]] || latest=$x
		done

		${2:+"$FUNCNAME"} "${2:-printf}" -- %s "$latest"
	fi
}

# lsof wrapper
function lsfd {
	local -A opts=(
		[u]='ofd=$2'
		[t]='target=$2'
	)

	local ofd=${ofd:-2} target=${target:-$BASHPID}

	while [[ $1 == -* ]]; do
		${opts[$1]+}
		if [[ $1 != -@(h|\?|help) && $2 != +([[:digit:]]) ]]; then
			cat >&2
			return 1
		fi
		case ${1##+(-)} in
			u)
				ofd=$2
				shift 2
				;;
			t)
				target=$2
				shift 2
				;;
			h|\?|help)
				cat >&2
				return 0
		esac
	done <<-EOF
	USAGE: ${FUNCNAME} [-h|-?|--help] [-u <fd>] [ -t <PID> ] [<fd1> <fd2> <fd3>...]

	This is a small lsof wrapper which displays the open file descriptors of the
	current BASHPID. If no FDs are given, the default FDs to display are those open
	by the current process. ofd can also be set in the environment.

	-u <fd>: Use fd for output. Defaults to stderr. Overrides ofd set in the environment.
	-t <PID>: Use PID instead of BASHPID. Overrides "target" set in the environment.
EOF

	# Fixme: unsafe without input validation for digits.
	IFS=, local -a "fds=(${*:-/proc/\${target:-self}/fd/*})" 'fds=("${fds[*]##*/}")'
	lsof -a -p $target -d "$fds" +f g -- >&"$ofd" # >&2
}

# Fix for broken applications (all KDE apps) which cannot read either stdin or pipes. Example:
# curl -s "example.com/foo.c" | pipewrap kompare /dev/stdin ~/foo.c
function pipewrap {
	"$@" <<<"$(</dev/stdin)"
}

function togglePolipo {
	if (( EUID )); then
		echo 'Must be root'
		return 1
	else
		ed -s /etc/polipo/config
		rc-service polipo restart
	fi
} <<\EOF
g/#\?socksP/s/^/#/\
s/^##//\
p
w
EOF

function pushPromptCommand {
	eval "$PROMPT_COMMAND"
	case $TERM in
		xterm*|rxvt*|Eterm|aterm|kterm|gnome*|interix)
			PROMPT_COMMAND='printf "\E]0;%s@%s:%s\a" "$USER" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
			;;
		screen*)
			PROMPT_COMMAND='printf "\E_%s@%s:%s\E\\" "$USER" "${HOSTNAME%%.*}" "${PWD/#$HOME/~}"'
			;;
	esac
}

function remapEsc {
	xmodmap -
	xset r rate 175 65
} <<\EOF
remove Lock = Caps_Lock
keysym Escape = Caps_Lock
keysym Caps_Lock = Escape
add Lock = Caps_Lock
EOF

# Print or assign a random alphanumeric string of a given length.
# rndstr len [ var ]
function rndstr {
	if [[ $FUNCNAME == "${FUNCNAME[1]}" ]]; then
		unset -v a l
		printf "$@"
	elif [[ $1 != +([[:digit:]]) ]]; then
		return 1
	elif (( $1 )); then
		typeset a=({a..z} {A..Z} {0..9}) l=${#a[@]} 
		eval '${2:+"${FUNCNAME:-${.sh.fun}}" -v} "${2:-printf}" -- %s "${a[RANDOM%l]"{1..'"$1"'}"}"'
	fi
}

function sprunge {
	curl -sF 'sprunge=<-' 'http://sprunge.us' <"${1:-/dev/stdin}"
}

function trayr {
	typeset -a opts=(
		--edge top
		--align right
		--SetDockType true
		--SetPartialStrut true
		--expand true
		--widthtype percent
		--width 15
		--transparent true
		--tint 0x000000
		--heighttype pixel
		--height 12
	)

	trayer "${opts[@]}" & disown
}

function unset2 {
	unset -v -- "$@"
}

function zip_longest {
	if [[ $1 == -v ]]; then :; fi  


	: "${_[0]"{0..9}"+"{"x","x"}"}" # "
}

# vim: set fenc=utf-8 ff=unix ft=sh :
