#!/usr/bin/env bash
# /etc/portage/bashrc
# Dan Douglas <d@ndougl.as>

[[ $EBUILD_PHASE != setup ]] && return
#typeset -a bashrcInitialFunctions
#compgen -A function | mapfile -t bashrcInitialFunctions

# Declare bashrc functions.
# Always call `__bashrc_Func_Tool__ collisioncheck` first!
function __bashrc_Funcs__ {
	# True if all args are valid names
	function checkValidNames {
		${1:+\:} return 1
		typeset name
		for name; do
			[[ $name == [[:alpha:]_]*([[:alnum:]_]) ]] || return
		done
	}

	# Create an associative array with keys filled from the given array
	function arrayToSet {
		checkValidNames "$1" "$2" || return
		typeset -n pIn=$1 pOut=$2
		eval "$(printf 'pOut[%q]= ' "${pIn[@]}")"
	}

	# Set up the initial associative array of CFLAGS and CXXFLAGS. 
	# Takes an array name to assign and optionally the names of "flag groups" to include.
	# bashrcSetupFlags arrname groupname [ groupname ... ]
	function bashrcSetupFlags {
		if [[ -z $1 ]]; then
			eerror "${FUNCNAME}: Must pass at least a non-empty associative array name argument."
			return 1
		else
			typeset -n __groupArray=$1
			typeset nprocs
			nprocs=$(getconf _NPROCESSORS_ONLN) || nprocs=16
			
			# Base CFLAG groups
			typeset -A groups=(
				[base]='(-march=native -Ofast -ftree-vectorize -fno-stack-protector -pipe)'
				[graphite]='(-floop-interchange -floop-strip-mine -floop-block -fgraphite-identity)'
				[debug]='(-ggdb)'
				[prof]='(-p)'
				[spstrong]='(-fstack-protector-strong)'
				[lto]='(-flto -fuse-linker-plugin)'
			)

			typeset x
			typeset -a y
			for x in "${@:2}"; do
				if [[ ! -v groups[$x] ]]; then
					eerror "${FUNCNAME}: Invalid flag group name: ${x}"
					return 1
				else
					eval "y=${groups[$x]}"
					arrayToSet y __groupArray
				fi
			done
		fi
	}

	# Usage: bashrcRunHooks "hookMap[$CATEGORY/$PN]"
	function bashrcRunHooks {
		set -x; trap 'trap RETURN; set +x' RETURN
		typeset -A flags ldflags
		typeset -a baseFlagGroups
		typeset nprocs lto
		nprocs=$(getconf _NPROCESSORS_ONLN) || nprocs=16

		typeset -a Wl=(
			-O1
			--as-needed
			--sort-common
			--hash-style=gnu
		)

		if bashrcIsClang; then
			einfo 'bashrc: Looks like this is clang!'
			baseFlagGroups=(base lto debug)
		else
			baseFlagGroups=(base graphite lto debug)
		fi

		if [[ -v $1 ]] &&
			typeset -n __ref=$1 &&
			typeset -a "__hooks=${__ref}" &&
			(( ${#__hooks[@]} >= 1 )) 
		then
			typeset hook
			for hook in "${__hooks[@]}"; do  
				if ! typeset -f "$hook" >/dev/null 2>&1; then
					eerror "bashrc: Package specified a non-existing hook function: ${hook}"
					return 1
				elif einfo "bashrc: running hook: ${hook}"
					bashrcSetupFlags flags "${baseFlagGroups[@]}" || die 'bashrc: bashrcSetupFlags failed.'
					# All hooks must expect to receive `flags` as a first parameter.
					if ! "$hook" flags; then
						eerror "bashrc: hook function: ${hook} returned nonzero."
						return 1
					fi
				then
					einfo "bashrc: Hook function: ${hook} -- finished successfully. :)"
				else
					ewarn "bashrc: Hook ${hook} -- failed with status $?. :("
					return 1
				fi
			done
		elif [[ -n $OVERRIDE_FLAG_GROUPS ]]; then
			typeset -a overrideGroups
			IFS=' ' read -ra overrideGroups <<<"$OVERRIDE_FLAG_GROUPS"
			bashrcSetupFlags flags "${overrideGroups[@]}" || die 'bashrcSetupFlags failed.'
			einfo "bashrc: No hook function defined for $1 -- used user-defined OVERRIDE_FLAG_GROUPS. :)"
		else
			bashrcSetupFlags flags "${baseFlagGroups[@]}" || die 'bashrc: bashrcSetupFlags failed.'
			einfo "bashrc: No hook function defined for $1 -- used default flag groups. :)"
		fi

		[[ -v flags[-flto] ]] && lto=
		if bashrcIsClang; then
			if [[ -v lto ]]; then
				unset -v flags\[-fuse-linker-plugin\]
				#Wl+=('-plugin=/usr/lib/LLVMgold.so')
				#export \
				#	AR=/usr/local/bin/clang-ar \
				#	RANLIB=: \
				#	NM='nm --plugin /usr/lib/LLVMgold.so'
				export AR=/usr/bin/llvm-ar RANLIB=/usr/bin/llvm-ranlib NM=/usr/bin/llvm-nm
			fi
		else
			if [[ -v lto ]]; then
				unset -v 'flags[-flto]'
				flags[-flto=$nprocs]=
			fi
			export AR=gcc-ar NM=gcc-nm RANLIB=gcc-ranlib
		fi
		
		export CFLAGS=${!flags[*]} CXXFLAGS=${!flags[*]}
		arrayToSet Wl ldflags || return
		typeset IFS=, 
		export LDFLAGS; LDFLAGS="-Wl,${!ldflags[*]}${lto+ "${!flags[@]}"}"
	}

	# Test whether this is clang
	function bashrcIsClang {
		set C{C,XX,PP}
		typeset -n __varname
		for __varname; do
			[[ $__varname == *clang* ]] && return
		done
		return 1
	}

	#########
	# All package hooks below
	#########

	function bashrcStd++14 {
		[[ $1 ]] && typeset -n _ref=$1 &&
			_ref[-std=gnu++14]=
	}

	function bashrcMakeoptsJ1 {
		export MAKEOPTS=-j1
	}

	function bashrcFdLimit {
		ulimit -n 1000000
	}
	
	function bashrcNoDebug {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v '_ref[-ggdb]'
	}

	# s/-Ofast/-O3/
	function bashrcNoFast {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v '_ref[-Ofast]' &&
			_ref[-O3]=
	}

	function bashrcNoGraphite {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v _ref\[-{floop-interchange,floop-strip-mine,floop-block,fgraphite-identity}\]
	}

	function bashrcNoError {
		[[ $1 ]] && typeset -n _ref=$1 &&
			_ref[-Wno-error]=
	}
	
	function bashrcNoLTO {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v _ref\[-{flto,fuse-linker-plugin}\]
	}

	function bashrcStackProtectorStrong {
		[[ $1 ]] && typeset -n _ref=$1 &&
			bashrcSetupFlags _ref spstrong &&
			unset -v '_ref[-fstack-protector]'
	}

	function bashrcNoStackProtector {
		[[ $1 ]] && typeset -n _ref=$1 &&
			unset -v _ref\[-fstack-protector{,-strong}\]

		_ref[-fno-stack-protector]=
	}

	function bashrcBashHook {
		export EXTRA_ECONF=--without-bash-malloc
		
# 		function pre_src_configure {
# 			eval unset -f src_configure \; \
# 				"$(typeset -fp src_configure | sed -r 's/^(local myconf).*/\1=(--without-bash-malloc)/')"
# 		}
	}

	function bashrcDgKamFix {
		export MYSQL_TOOLS_PATH=/usr/share/mysql/scripts
	}

	function bashrcDoBinutils {
		export EXTRA_ECONF=--enable-gold=default
	}

	function bashrcKdevelopCollisionIgnore {
		export COLLISION_IGNORE='/usr/share/kdevappwizard/templates/qmake_qt4guiapp.tar.bz2'
	}
}

# Prevent elusive namespace issues.
function __bashrc_Func_Tool__ {
	typeset -a bashrcFuncs=(
		arrayToSet
		bashrcAMake112
		bashrcBashHook
		bashrcDgKamFix
		bashrcDoBinutils
		bashrcDoKsh
		bashrcFdLimit
		bashrcHeimdal
		bashrcIsClang
		bashrcKdeLibs
		bashrcKdevelopCollisionIgnore
		bashrcNoDebug
		bashrcNoError
		bashrcNoFast
		bashrcNoGraphite
		bashrcNoLTO
		bashrcPlainBuild
		bashrcRunHooks
		bashrcSetupFlags
		checkValidNames
	)

	case $1 in
		collisioncheck)
			typeset func
			for func in "${bashrcFuncs[@]}"; do
				if [[ $(type -t "$func") == function ]]; then
					eerror "${FUNCNAME}: FUNCTION COLLISION DETECTED! ${func}"
					return 1
				fi
			done
			;;
		cleanup)
			if ! unset -f "${bashrcFuncs[@]}" __bashrc_Func_Tool__ __bashrc_Funcs__ __bashrc_Main__; then
				eerror "${FUNCNAME}: Failed cleaning up functions."
				return 1
			fi
			;;
		*)
			eerror "${FUNCNAME}: Invalid operation: ${1}. Doing nothing."
			return 1
	esac
}

function __bashrc_Main__ {
	unset -v IFS
	# Force current bash. Because why not?
	(( BASH_VERSINFO[0] >= 4 && BASH_VERSINFO[1] >= 3 )) || die 'bashrc requires at least Bash 4.3.'

	typeset -a shopts=(extglob lastpipe expand_aliases)
	typeset opt
	for opt in "${!shopts[@]}"; do
		if shopt -q "${shopts[opt]}"; then
			unset -v 'shopts[opt]'
		else
			shopt -s "${shopts[opt]}"
		fi
	done
	(( ${#shopts[@]} )) && trap "trap RETURN; shopt -u ${shopts[*]}" RETURN

	# We could try to save and restore functions to avoid collisions, but
	# it's probably better to just fail loudly and fix the collision
	# instead.
	__bashrc_Func_Tool__ collisioncheck || die 'bashrc: collision check failed.'
	__bashrc_Funcs__ || die 'bashrc: Somehow failed declaring functions?' # Should never happen.

	# Define mappings from package names to a set of hook functions.
	typeset -A hookMap=(
		[app-shells/bash]='(bashrcBashHook)'
		[app-office/libreoffice]='(bashrcNoFast bashrcNoDebug)'
		[dev-db/sqlite]='(bashrcNoFast)'
		[dev-db/postgresql]='(bashrcNoFast)'
		#[dev-libs/protobuf]='(bashrcNoLTO)'
		[dev-lang/mono]='(bashrcNoLTO)'
		[dev-qt/qt-creator]='(bashrcNoFast)'
		[dev-qt/qtwebkit]='(bashrcNoFast)'
		[gnome-extra/libgda]='(bashrcNoFast)'
		[kde-apps/okular]='(bashrcNoError)'
		[kde-base/kdelibs]='(bashrcNoFast)'
		[kde-frameworks/kjs]='(bashrcNoFast)'
		[media-gfx/digikam]='(bashrcDgKamFix)'
		[media-gfx/rawstudio]='(bashrcNoFast)'
		[media-gfx/mypaint]='(bashrcNoLTO)'
		[media-libs/mesa]='(bashrcNoLTO)'
		[media-libs/opus]='(bashrcNoFast)'
		[net-analyzer/rrdtool]='(bashrcNoFast)'
		[net-libs/nodejs]='(bashrcNoFast bashrcNoGraphite)'
		[sys-fs/udev]='(bashrcNoFast)'
		[sys-libs/db]='(bashrcNoFast)'
		[sys-devel/binutils]='(bashrcDoBinutils)'
		[www-client/phantomjs]='(bashrcNoFast)'
		[www-client/chromium]='(bashrcNoFast bashrcNoDebug bashrcFdLimit)'
		[www-client/firefox]='(bashrcNoFast bashrcNoDebug)'
		[www-servers/apache]='(bashrcStackProtectorStrong)'
		[www-servers/nginx]='(bashrcStackProtectorStrong)'
	)

	bashrcRunHooks "hookMap[${CATEGORY}/${PN}]" || die "bashrc: RunHooks failed with status $?."
	einfo $'bashrc computed flags:\n'"$(declare -p CFLAGS CXXFLAGS LDFLAGS)"
	export I_PROMISE_TO_SUPPLY_PATCHES_WITH_BUGS=1
	unset -v QT_SELECT
	__bashrc_Func_Tool__ cleanup || die 'bashrc: cleanup failed.'
}

__bashrc_Main__ "$@"

# vim: set fenc=utf-8 ff=unix ft=sh ts=4 sw=4 sts=1 noet :
